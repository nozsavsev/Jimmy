#include "Jimmy_Core.h"

std::wstring keyToStr(DWORD key)
{
    switch (key)
    {
    case   VK_LBUTTON:  return std::wstring(L"LBUTTON");
    case   VK_RBUTTON:  return std::wstring(L"RBUTTON");
    case   VK_CANCEL:  return std::wstring(L"CANCEL");
    case   VK_MBUTTON:  return std::wstring(L"MBUTTON");
    case   VK_XBUTTON1:  return std::wstring(L"XBUTTON1");
    case   VK_XBUTTON2:  return std::wstring(L"XBUTTON2");
    case   VK_BACK:  return std::wstring(L"BACK");
    case   VK_TAB:  return std::wstring(L"TAB");
    case   VK_CLEAR:  return std::wstring(L"CLEAR");
    case   VK_RETURN:  return std::wstring(L"RETURN");
    case   VK_SHIFT:  return std::wstring(L"SHIFT");
    case   VK_CONTROL:  return std::wstring(L"CONTROL");
    case   VK_MENU:  return std::wstring(L"MENU");
    case   VK_PAUSE:  return std::wstring(L"PAUSE");
    case   VK_CAPITAL:  return std::wstring(L"CAPITAL");
    case   VK_KANA:  return std::wstring(L"KANA");
    case   VK_JUNJA:  return std::wstring(L"JUNJA");
    case   VK_FINAL:  return std::wstring(L"FINAL");
    case   VK_HANJA:  return std::wstring(L"HANJA");
    case   VK_ESCAPE:  return std::wstring(L"ESCAPE");
    case   VK_CONVERT:  return std::wstring(L"CONVERT");
    case   VK_ACCEPT:  return std::wstring(L"ACCEPT");
    case   VK_MODECHANGE:  return std::wstring(L"MODECHANGE");
    case   VK_SPACE:  return std::wstring(L"SPACE");
    case   VK_PRIOR:  return std::wstring(L"PRIOR");
    case   VK_NEXT:  return std::wstring(L"NEXT");
    case   VK_END:  return std::wstring(L"END");
    case   VK_HOME:  return std::wstring(L"HOME");
    case   VK_LEFT:  return std::wstring(L"LEFT");
    case   VK_UP:  return std::wstring(L"UP");
    case   VK_RIGHT:  return std::wstring(L"RIGHT");
    case   VK_DOWN:  return std::wstring(L"DOWN");
    case   VK_SELECT:  return std::wstring(L"SELECT");
    case   VK_PRINT:  return std::wstring(L"PRINT");
    case   VK_EXECUTE:  return std::wstring(L"EXECUTE");
    case   VK_SNAPSHOT:  return std::wstring(L"SNAPSHOT");
    case   VK_INSERT:  return std::wstring(L"INSERT");
    case   VK_DELETE:  return std::wstring(L"DELETE");
    case   VK_HELP:  return std::wstring(L"HELP");
    case   '0':  return std::wstring(L"0");
    case   '1':  return std::wstring(L"1");
    case   '2':  return std::wstring(L"2");
    case   '3':  return std::wstring(L"3");
    case   '4':  return std::wstring(L"4");
    case   '5':  return std::wstring(L"5");
    case   '6':  return std::wstring(L"6");
    case   '7':  return std::wstring(L"7");
    case   '8':  return std::wstring(L"8");
    case   '9':  return std::wstring(L"9");
    case   'A':  return std::wstring(L"A");
    case   'B':  return std::wstring(L"B");
    case   'C':  return std::wstring(L"C");
    case   'D':  return std::wstring(L"D");
    case   'E':  return std::wstring(L"E");
    case   'F':  return std::wstring(L"F");
    case   'G':  return std::wstring(L"G");
    case   'H':  return std::wstring(L"H");
    case   'I':  return std::wstring(L"I");
    case   'J':  return std::wstring(L"J");
    case   'K':  return std::wstring(L"K");
    case   'L':  return std::wstring(L"L");
    case   'M':  return std::wstring(L"M");
    case   'N':  return std::wstring(L"N");
    case   'O':  return std::wstring(L"O");
    case   'P':  return std::wstring(L"P");
    case   'Q':  return std::wstring(L"Q");
    case   'R':  return std::wstring(L"R");
    case   'S':  return std::wstring(L"S");
    case   'T':  return std::wstring(L"T");
    case   'U':  return std::wstring(L"U");
    case   'V':  return std::wstring(L"V");
    case   'W':  return std::wstring(L"W");
    case   'X':  return std::wstring(L"X");
    case   'Y':  return std::wstring(L"Y");
    case   'Z':  return std::wstring(L"Z");
    case   VK_LWIN:  return std::wstring(L"LWIN");
    case   VK_RWIN:  return std::wstring(L"RWIN");
    case   VK_APPS:  return std::wstring(L"APPS");
    case   VK_SLEEP:  return std::wstring(L"SLEEP");
    case   VK_NUMPAD0:  return std::wstring(L"NUMPAD0");
    case   VK_NUMPAD1:  return std::wstring(L"NUMPAD1");
    case   VK_NUMPAD2:  return std::wstring(L"NUMPAD2");
    case   VK_NUMPAD3:  return std::wstring(L"NUMPAD3");
    case   VK_NUMPAD4:  return std::wstring(L"NUMPAD4");
    case   VK_NUMPAD5:  return std::wstring(L"NUMPAD5");
    case   VK_NUMPAD6:  return std::wstring(L"NUMPAD6");
    case   VK_NUMPAD7:  return std::wstring(L"NUMPAD7");
    case   VK_NUMPAD8:  return std::wstring(L"NUMPAD8");
    case   VK_NUMPAD9:  return std::wstring(L"NUMPAD9");
    case   VK_MULTIPLY:  return std::wstring(L"MULTIPLY");
    case   VK_ADD:  return std::wstring(L"ADD");
    case   VK_SEPARATOR:  return std::wstring(L"SEPARATOR");
    case   VK_SUBTRACT:  return std::wstring(L"SUBTRACT");
    case   VK_DECIMAL:  return std::wstring(L"DECIMAL");
    case   VK_DIVIDE:  return std::wstring(L"DIVIDE");
    case   VK_F1:  return std::wstring(L"F1");
    case   VK_F2:  return std::wstring(L"F2");
    case   VK_F3:  return std::wstring(L"F3");
    case   VK_F4:  return std::wstring(L"F4");
    case   VK_F5:  return std::wstring(L"F5");
    case   VK_F6:  return std::wstring(L"F6");
    case   VK_F7:  return std::wstring(L"F7");
    case   VK_F8:  return std::wstring(L"F8");
    case   VK_F9:  return std::wstring(L"F9");
    case   VK_F10:  return std::wstring(L"F10");
    case   VK_F11:  return std::wstring(L"F11");
    case   VK_F12:  return std::wstring(L"F12");
    case   VK_F13:  return std::wstring(L"F13");
    case   VK_F14:  return std::wstring(L"F14");
    case   VK_F15:  return std::wstring(L"F15");
    case   VK_F16:  return std::wstring(L"F16");
    case   VK_F17:  return std::wstring(L"F17");
    case   VK_F18:  return std::wstring(L"F18");
    case   VK_F19:  return std::wstring(L"F19");
    case   VK_F20:  return std::wstring(L"F20");
    case   VK_F21:  return std::wstring(L"F21");
    case   VK_F22:  return std::wstring(L"F22");
    case   VK_F23:  return std::wstring(L"F23");
    case   VK_F24:  return std::wstring(L"F24");
    case   VK_NUMLOCK:  return std::wstring(L"NUMLOCK");
    case   VK_SCROLL:  return std::wstring(L"SCROLL");
    case   VK_LSHIFT:  return std::wstring(L"LSHIFT");
    case   VK_RSHIFT:  return std::wstring(L"RSHIFT");
    case   VK_LCONTROL:  return std::wstring(L"LCONTROL");
    case   VK_RCONTROL:  return std::wstring(L"RCONTROL");
    case   VK_LMENU:  return std::wstring(L"LMENU");
    case   VK_RMENU:  return std::wstring(L"RMENU");
    case   VK_BROWSER_BACK:  return std::wstring(L"BROWSER_BACK");
    case   VK_BROWSER_FORWARD:  return std::wstring(L"BROWSER_FORWARD");
    case   VK_BROWSER_REFRESH:  return std::wstring(L"BROWSER_REFRESH");
    case   VK_BROWSER_STOP:  return std::wstring(L"BROWSER_STOP");
    case   VK_BROWSER_SEARCH:  return std::wstring(L"BROWSER_SEARCH");
    case   VK_BROWSER_FAVORITES:  return std::wstring(L"BROWSER_FAVORITES");
    case   VK_BROWSER_HOME:  return std::wstring(L"BROWSER_HOME");
    case   VK_VOLUME_MUTE:  return std::wstring(L"VOLUME_MUTE");
    case   VK_VOLUME_DOWN:  return std::wstring(L"VOLUME_DOWN");
    case   VK_VOLUME_UP:  return std::wstring(L"VOLUME_UP");
    case   VK_MEDIA_NEXT_TRACK:  return std::wstring(L"MEDIA_NEXT_TRACK");
    case   VK_MEDIA_PREV_TRACK:  return std::wstring(L"MEDIA_PREV_TRACK");
    case   VK_MEDIA_STOP:  return std::wstring(L"MEDIA_STOP");
    case   VK_MEDIA_PLAY_PAUSE:  return std::wstring(L"MEDIA_PLAY_PAUSE");
    case   VK_LAUNCH_MAIL:  return std::wstring(L"LAUNCH_MAIL");
    case   VK_LAUNCH_MEDIA_SELECT:  return std::wstring(L"LAUNCH_MEDIA_SELECT");
    case   VK_LAUNCH_APP1:  return std::wstring(L"LAUNCH_APP1");
    case   VK_LAUNCH_APP2:  return std::wstring(L"LAUNCH_APP2");
    case   VK_OEM_1:  return std::wstring(L"OEM_1");
    case   VK_OEM_PLUS:  return std::wstring(L"OEM_PLUS");
    case   VK_OEM_COMMA:  return std::wstring(L"OEM_COMMA");
    case   VK_OEM_MINUS:  return std::wstring(L"OEM_MINUS");
    case   VK_OEM_PERIOD:  return std::wstring(L"OEM_PERIOD");
    case   VK_OEM_2:  return std::wstring(L"OEM_2");
    case   VK_OEM_3:  return std::wstring(L"OEM_3");
    case   VK_OEM_4:  return std::wstring(L"OEM_4");
    case   VK_OEM_5:  return std::wstring(L"OEM_5");
    case   VK_OEM_6:  return std::wstring(L"OEM_6");
    case   VK_OEM_7:  return std::wstring(L"OEM_7");
    case   VK_OEM_8:  return std::wstring(L"OEM_8");
    case   VK_OEM_102:  return std::wstring(L"OEM_102");
    case   VK_PROCESSKEY:  return std::wstring(L"PROCESSKEY");
    case   VK_PACKET:  return std::wstring(L"PACKET");
    case   VK_ATTN:  return std::wstring(L"ATTN");
    case   VK_CRSEL:  return std::wstring(L"CRSEL");
    case   VK_EXSEL:  return std::wstring(L"EXSEL");
    case   VK_EREOF:  return std::wstring(L"EREOF");
    case   VK_PLAY:  return std::wstring(L"PLAY");
    case   VK_ZOOM:  return std::wstring(L"ZOOM");
    case   VK_NONAME:  return std::wstring(L"NONAME");
    case   VK_PA1:  return std::wstring(L"PA1");
    case   VK_OEM_CLEAR:  return std::wstring(L"OEM_CLEAR");
    }
}

DWORD StrToKey(std::wstring key_str)
{
    if (!wcscmp(key_str.c_str(), L"LBUTTON")) return VK_LBUTTON;
    if (!wcscmp(key_str.c_str(), L"RBUTTON")) return VK_RBUTTON;
    if (!wcscmp(key_str.c_str(), L"CANCEL")) return VK_CANCEL;
    if (!wcscmp(key_str.c_str(), L"MBUTTON")) return VK_MBUTTON;
    if (!wcscmp(key_str.c_str(), L"XBUTTON1")) return VK_XBUTTON1;
    if (!wcscmp(key_str.c_str(), L"XBUTTON2")) return VK_XBUTTON2;
    if (!wcscmp(key_str.c_str(), L"BACK")) return VK_BACK;
    if (!wcscmp(key_str.c_str(), L"TAB")) return VK_TAB;
    if (!wcscmp(key_str.c_str(), L"CLEAR")) return VK_CLEAR;
    if (!wcscmp(key_str.c_str(), L"RETURN")) return VK_RETURN;
    if (!wcscmp(key_str.c_str(), L"SHIFT")) return VK_SHIFT;
    if (!wcscmp(key_str.c_str(), L"CONTROL")) return VK_CONTROL;
    if (!wcscmp(key_str.c_str(), L"MENU")) return VK_MENU;
    if (!wcscmp(key_str.c_str(), L"PAUSE")) return VK_PAUSE;
    if (!wcscmp(key_str.c_str(), L"CAPITAL")) return VK_CAPITAL;
    if (!wcscmp(key_str.c_str(), L"KANA")) return VK_KANA;
    if (!wcscmp(key_str.c_str(), L"JUNJA")) return VK_JUNJA;
    if (!wcscmp(key_str.c_str(), L"FINAL")) return VK_FINAL;
    if (!wcscmp(key_str.c_str(), L"HANJA")) return VK_HANJA;
    if (!wcscmp(key_str.c_str(), L"ESCAPE")) return VK_ESCAPE;
    if (!wcscmp(key_str.c_str(), L"CONVERT")) return VK_CONVERT;
    if (!wcscmp(key_str.c_str(), L"ACCEPT")) return VK_ACCEPT;
    if (!wcscmp(key_str.c_str(), L"MODECHANGE")) return VK_MODECHANGE;
    if (!wcscmp(key_str.c_str(), L"SPACE")) return VK_SPACE;
    if (!wcscmp(key_str.c_str(), L"PRIOR")) return VK_PRIOR;
    if (!wcscmp(key_str.c_str(), L"NEXT")) return VK_NEXT;
    if (!wcscmp(key_str.c_str(), L"END")) return VK_END;
    if (!wcscmp(key_str.c_str(), L"HOME")) return VK_HOME;
    if (!wcscmp(key_str.c_str(), L"LEFT")) return VK_LEFT;
    if (!wcscmp(key_str.c_str(), L"UP")) return VK_UP;
    if (!wcscmp(key_str.c_str(), L"RIGHT")) return VK_RIGHT;
    if (!wcscmp(key_str.c_str(), L"DOWN")) return VK_DOWN;
    if (!wcscmp(key_str.c_str(), L"SELECT")) return VK_SELECT;
    if (!wcscmp(key_str.c_str(), L"PRINT")) return VK_PRINT;
    if (!wcscmp(key_str.c_str(), L"EXECUTE")) return VK_EXECUTE;
    if (!wcscmp(key_str.c_str(), L"SNAPSHOT")) return VK_SNAPSHOT;
    if (!wcscmp(key_str.c_str(), L"INSERT")) return VK_INSERT;
    if (!wcscmp(key_str.c_str(), L"DELETE")) return VK_DELETE;
    if (!wcscmp(key_str.c_str(), L"HELP")) return VK_HELP;
    if (!wcscmp(key_str.c_str(), L"0")) return '0';
    if (!wcscmp(key_str.c_str(), L"1")) return '1';
    if (!wcscmp(key_str.c_str(), L"2")) return '2';
    if (!wcscmp(key_str.c_str(), L"3")) return '3';
    if (!wcscmp(key_str.c_str(), L"4")) return '4';
    if (!wcscmp(key_str.c_str(), L"5")) return '5';
    if (!wcscmp(key_str.c_str(), L"6")) return '6';
    if (!wcscmp(key_str.c_str(), L"7")) return '7';
    if (!wcscmp(key_str.c_str(), L"8")) return '8';
    if (!wcscmp(key_str.c_str(), L"9")) return '9';
    if (!wcscmp(key_str.c_str(), L"A")) return 'A';
    if (!wcscmp(key_str.c_str(), L"B")) return 'B';
    if (!wcscmp(key_str.c_str(), L"C")) return 'C';
    if (!wcscmp(key_str.c_str(), L"D")) return 'D';
    if (!wcscmp(key_str.c_str(), L"E")) return 'E';
    if (!wcscmp(key_str.c_str(), L"F")) return 'F';
    if (!wcscmp(key_str.c_str(), L"G")) return 'G';
    if (!wcscmp(key_str.c_str(), L"H")) return 'H';
    if (!wcscmp(key_str.c_str(), L"I")) return 'I';
    if (!wcscmp(key_str.c_str(), L"J")) return 'J';
    if (!wcscmp(key_str.c_str(), L"K")) return 'K';
    if (!wcscmp(key_str.c_str(), L"L")) return 'L';
    if (!wcscmp(key_str.c_str(), L"M")) return 'M';
    if (!wcscmp(key_str.c_str(), L"N")) return 'N';
    if (!wcscmp(key_str.c_str(), L"O")) return 'O';
    if (!wcscmp(key_str.c_str(), L"P")) return 'P';
    if (!wcscmp(key_str.c_str(), L"Q")) return 'Q';
    if (!wcscmp(key_str.c_str(), L"R")) return 'R';
    if (!wcscmp(key_str.c_str(), L"S")) return 'S';
    if (!wcscmp(key_str.c_str(), L"T")) return 'T';
    if (!wcscmp(key_str.c_str(), L"U")) return 'U';
    if (!wcscmp(key_str.c_str(), L"V")) return 'V';
    if (!wcscmp(key_str.c_str(), L"W")) return 'W';
    if (!wcscmp(key_str.c_str(), L"X")) return 'X';
    if (!wcscmp(key_str.c_str(), L"Y")) return 'Y';
    if (!wcscmp(key_str.c_str(), L"Z")) return 'Z';
    if (!wcscmp(key_str.c_str(), L"LWIN")) return VK_LWIN;
    if (!wcscmp(key_str.c_str(), L"RWIN")) return VK_RWIN;
    if (!wcscmp(key_str.c_str(), L"APPS")) return VK_APPS;
    if (!wcscmp(key_str.c_str(), L"SLEEP")) return VK_SLEEP;
    if (!wcscmp(key_str.c_str(), L"NUMPAD0")) return VK_NUMPAD0;
    if (!wcscmp(key_str.c_str(), L"NUMPAD1")) return VK_NUMPAD1;
    if (!wcscmp(key_str.c_str(), L"NUMPAD2")) return VK_NUMPAD2;
    if (!wcscmp(key_str.c_str(), L"NUMPAD3")) return VK_NUMPAD3;
    if (!wcscmp(key_str.c_str(), L"NUMPAD4")) return VK_NUMPAD4;
    if (!wcscmp(key_str.c_str(), L"NUMPAD5")) return VK_NUMPAD5;
    if (!wcscmp(key_str.c_str(), L"NUMPAD6")) return VK_NUMPAD6;
    if (!wcscmp(key_str.c_str(), L"NUMPAD7")) return VK_NUMPAD7;
    if (!wcscmp(key_str.c_str(), L"NUMPAD8")) return VK_NUMPAD8;
    if (!wcscmp(key_str.c_str(), L"NUMPAD9")) return VK_NUMPAD9;
    if (!wcscmp(key_str.c_str(), L"MULTIPLY")) return VK_MULTIPLY;
    if (!wcscmp(key_str.c_str(), L"ADD")) return VK_ADD;
    if (!wcscmp(key_str.c_str(), L"SEPARATOR")) return VK_SEPARATOR;
    if (!wcscmp(key_str.c_str(), L"SUBTRAct")) return VK_SUBTRACT;
    if (!wcscmp(key_str.c_str(), L"DECIMAL")) return VK_DECIMAL;
    if (!wcscmp(key_str.c_str(), L"DIVIDE")) return VK_DIVIDE;
    if (!wcscmp(key_str.c_str(), L"F1")) return VK_F1;
    if (!wcscmp(key_str.c_str(), L"F2")) return VK_F2;
    if (!wcscmp(key_str.c_str(), L"F3")) return VK_F3;
    if (!wcscmp(key_str.c_str(), L"F4")) return VK_F4;
    if (!wcscmp(key_str.c_str(), L"F5")) return VK_F5;
    if (!wcscmp(key_str.c_str(), L"F6")) return VK_F6;
    if (!wcscmp(key_str.c_str(), L"F7")) return VK_F7;
    if (!wcscmp(key_str.c_str(), L"F8")) return VK_F8;
    if (!wcscmp(key_str.c_str(), L"F9")) return VK_F9;
    if (!wcscmp(key_str.c_str(), L"F10")) return VK_F10;
    if (!wcscmp(key_str.c_str(), L"F11")) return VK_F11;
    if (!wcscmp(key_str.c_str(), L"F12")) return VK_F12;
    if (!wcscmp(key_str.c_str(), L"F13")) return VK_F13;
    if (!wcscmp(key_str.c_str(), L"F14")) return VK_F14;
    if (!wcscmp(key_str.c_str(), L"F15")) return VK_F15;
    if (!wcscmp(key_str.c_str(), L"F16")) return VK_F16;
    if (!wcscmp(key_str.c_str(), L"F17")) return VK_F17;
    if (!wcscmp(key_str.c_str(), L"F18")) return VK_F18;
    if (!wcscmp(key_str.c_str(), L"F19")) return VK_F19;
    if (!wcscmp(key_str.c_str(), L"F20")) return VK_F20;
    if (!wcscmp(key_str.c_str(), L"F21")) return VK_F21;
    if (!wcscmp(key_str.c_str(), L"F22")) return VK_F22;
    if (!wcscmp(key_str.c_str(), L"F23")) return VK_F23;
    if (!wcscmp(key_str.c_str(), L"F24")) return VK_F24;
    if (!wcscmp(key_str.c_str(), L"NUMLOCK")) return VK_NUMLOCK;
    if (!wcscmp(key_str.c_str(), L"SCROLL")) return VK_SCROLL;
    if (!wcscmp(key_str.c_str(), L"LSHIFT")) return VK_LSHIFT;
    if (!wcscmp(key_str.c_str(), L"RSHIFT")) return VK_RSHIFT;
    if (!wcscmp(key_str.c_str(), L"LCONTROL")) return VK_LCONTROL;
    if (!wcscmp(key_str.c_str(), L"RCONTROL")) return VK_RCONTROL;
    if (!wcscmp(key_str.c_str(), L"LMENU")) return VK_LMENU;
    if (!wcscmp(key_str.c_str(), L"RMENU")) return VK_RMENU;
    if (!wcscmp(key_str.c_str(), L"BROWSER_BACK")) return VK_BROWSER_BACK;
    if (!wcscmp(key_str.c_str(), L"BROWSER_FORWARD")) return VK_BROWSER_FORWARD;
    if (!wcscmp(key_str.c_str(), L"BROWSER_REFRESH")) return VK_BROWSER_REFRESH;
    if (!wcscmp(key_str.c_str(), L"BROWSER_STOP")) return VK_BROWSER_STOP;
    if (!wcscmp(key_str.c_str(), L"BROWSER_SEARCH")) return VK_BROWSER_SEARCH;
    if (!wcscmp(key_str.c_str(), L"BROWSER_FAVORITES")) return VK_BROWSER_FAVORITES;
    if (!wcscmp(key_str.c_str(), L"BROWSER_HOME")) return VK_BROWSER_HOME;
    if (!wcscmp(key_str.c_str(), L"VOLUME_MUTE")) return VK_VOLUME_MUTE;
    if (!wcscmp(key_str.c_str(), L"VOLUME_DOWN")) return VK_VOLUME_DOWN;
    if (!wcscmp(key_str.c_str(), L"VOLUME_UP")) return VK_VOLUME_UP;
    if (!wcscmp(key_str.c_str(), L"MEDIA_NEXT_TRACK")) return VK_MEDIA_NEXT_TRACK;
    if (!wcscmp(key_str.c_str(), L"MEDIA_PREV_TRACK")) return VK_MEDIA_PREV_TRACK;
    if (!wcscmp(key_str.c_str(), L"MEDIA_STOP")) return VK_MEDIA_STOP;
    if (!wcscmp(key_str.c_str(), L"MEDIA_PLAY_PAUSE")) return VK_MEDIA_PLAY_PAUSE;
    if (!wcscmp(key_str.c_str(), L"LAUNCH_MAIL")) return VK_LAUNCH_MAIL;
    if (!wcscmp(key_str.c_str(), L"LAUNCH_MEDIA_SELECT")) return VK_LAUNCH_MEDIA_SELECT;
    if (!wcscmp(key_str.c_str(), L"LAUNCH_APP1")) return VK_LAUNCH_APP1;
    if (!wcscmp(key_str.c_str(), L"LAUNCH_APP2")) return VK_LAUNCH_APP2;
    if (!wcscmp(key_str.c_str(), L"OEM_1")) return VK_OEM_1;
    if (!wcscmp(key_str.c_str(), L"OEM_PLUS")) return VK_OEM_PLUS;
    if (!wcscmp(key_str.c_str(), L"OEM_COMMA")) return VK_OEM_COMMA;
    if (!wcscmp(key_str.c_str(), L"OEM_MINUS")) return VK_OEM_MINUS;
    if (!wcscmp(key_str.c_str(), L"OEM_PERIOD")) return VK_OEM_PERIOD;
    if (!wcscmp(key_str.c_str(), L"OEM_2")) return VK_OEM_2;
    if (!wcscmp(key_str.c_str(), L"OEM_3")) return VK_OEM_3;
    if (!wcscmp(key_str.c_str(), L"OEM_4")) return VK_OEM_4;
    if (!wcscmp(key_str.c_str(), L"OEM_5")) return VK_OEM_5;
    if (!wcscmp(key_str.c_str(), L"OEM_6")) return VK_OEM_6;
    if (!wcscmp(key_str.c_str(), L"OEM_7")) return VK_OEM_7;
    if (!wcscmp(key_str.c_str(), L"OEM_8")) return VK_OEM_8;
    if (!wcscmp(key_str.c_str(), L"OEM_102")) return VK_OEM_102;
    if (!wcscmp(key_str.c_str(), L"PROCESSKEY")) return VK_PROCESSKEY;
    if (!wcscmp(key_str.c_str(), L"PACKET")) return VK_PACKET;
    if (!wcscmp(key_str.c_str(), L"ATTN")) return VK_ATTN;
    if (!wcscmp(key_str.c_str(), L"CRSEL")) return VK_CRSEL;
    if (!wcscmp(key_str.c_str(), L"EXSEL")) return VK_EXSEL;
    if (!wcscmp(key_str.c_str(), L"EREOF")) return VK_EREOF;
    if (!wcscmp(key_str.c_str(), L"PLAY")) return VK_PLAY;
    if (!wcscmp(key_str.c_str(), L"ZOOM")) return VK_ZOOM;
    if (!wcscmp(key_str.c_str(), L"NONAME")) return VK_NONAME;
    if (!wcscmp(key_str.c_str(), L"PA1")) return VK_PA1;
    if (!wcscmp(key_str.c_str(), L"OEM_CLEAR")) return VK_OEM_CLEAR;
}